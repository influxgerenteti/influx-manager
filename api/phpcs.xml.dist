<?xml version="1.0"?>
<ruleset name="PHP_CodeSniffer">
    <description>The coding standard for PHP_CodeSniffer itself.</description>

    <file>autoload.php</file>
    <file>bin</file>
    <file>src</file>
    <file>tests</file>

    <exclude-pattern>*/Standards/*/Tests/*\.(inc|css|js)</exclude-pattern>

    <arg name="basepath" value="."/>
    <arg name="colors" />
    <arg name="parallel" value="75" />
    <arg value="np"/>

    <!-- Don't hide tokenizer exceptions -->
    <rule ref="Internal.Tokenizer.Exception">
        <type>error</type>
    </rule>

    <!-- Include the whole PEAR standard -->
    <rule ref="PEAR">
        <exclude name="PEAR.NamingConventions.ValidFunctionName" />
        <exclude name="PEAR.NamingConventions.ValidVariableName" />
        <exclude name="PEAR.NamingConventions.ValidVariableName.NotCamelCaps" />
        <exclude name="PEAR.Commenting.ClassComment" />
        <exclude name="PEAR.Commenting.FunctionComment.Missing" />
        <exclude name="PEAR.Commenting.FunctionComment.MissingParamTag" />
        <exclude name="PEAR.Commenting.FunctionComment.MissingParamComment" />
        <exclude name="PEAR.Commenting.FunctionComment.MissingReturn" />
        <exclude name="PEAR.Commenting.FunctionComment.SpacingAfterParamType" /> 
        <exclude name="PEAR.Commenting.FunctionComment.SpacingAfterParamName"/>
        <exclude name="PEAR.Commenting.FileComment.Missing" />
        <exclude name="PEAR.Commenting.FileComment.MissingCategoryTag" />
        <exclude name="PEAR.Commenting.FileComment.MissingPackageTag" />
        <exclude name="PEAR.Commenting.FileComment.MissingLinkTag" />
        <exclude name="PEAR.Commenting.FileComment.MissingVersion" />
        <exclude name="PEAR.Functions.FunctionDeclaration.SpaceBeforeOpenParen" />
		<exclude name="PEAR.WhiteSpace.ScopeClosingBrace.BreakIndent" />
		<exclude name="PEAR.WhiteSpace.ScopeIndent.IncorrectExact" />
		<exclude name="PEAR.Functions.FunctionDeclaration.SpaceBeforeOpenParen" />
    </rule>

    <!-- Include some sniffs from other standards that don't conflict with PEAR -->
    <rule ref="Squiz.Arrays.ArrayBracketSpacing" />
    <rule ref="Squiz.Arrays.ArrayDeclaration" />
    <!-- <rule ref="Squiz.Commenting.ClosingDeclarationComment" /> -->
    <rule ref="Squiz.ControlStructures.ControlSignature" />
    <rule ref="Squiz.ControlStructures.ElseIfDeclaration" />
    <rule ref="Squiz.Commenting.BlockComment" />
    <rule ref="Squiz.Commenting.DocCommentAlignment">
      <exclude name="Squiz.Commenting.DocCommentAlignment.SpaceAfterStar" />
    </rule>
    <rule ref="Squiz.Commenting.EmptyCatchComment" />
    <rule ref="Squiz.Commenting.InlineComment">
      <exclude name="Squiz.Commenting.InlineComment.InvalidEndChar" />
      <exclude name="Squiz.Commenting.InlineComment.NotCapital" />
    </rule>
    <rule ref="Squiz.Commenting.LongConditionClosingComment" />
    <rule ref="Squiz.Commenting.PostStatementComment" />
    <rule ref="Squiz.Commenting.VariableComment">
      <exclude name="Squiz.Commenting.VariableComment.MissingVar" />
      <exclude name="Squiz.Commenting.VariableComment.Missing" />
    </rule>
    <rule ref="Squiz.Formatting.OperatorBracket">
      <exclude name="Squiz.Formatting.OperatorBracket.MissingBrackets" />
    </rule>
    <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing" />
    <rule ref="Squiz.Operators.ComparisonOperatorUsage" />
    <rule ref="Squiz.PHP.DisallowInlineIf" />
    <rule ref="Squiz.Strings.ConcatenationSpacing">
      <properties>
        <property name="spacing" value="1" />
      </properties>
    </rule>
    <rule ref="Squiz.WhiteSpace.ControlStructureSpacing" />

    <rule ref="Squiz.WhiteSpace.FunctionClosingBraceSpace">
      <exclude name="Squiz.WhiteSpace.FunctionClosingBraceSpace.SpacingBeforeClose" />
    </rule>
    <rule ref="Squiz.WhiteSpace.FunctionSpacing">
      <exclude name="Squiz.WhiteSpace.FunctionSpacing.Before" />
      <exclude name="Squiz.WhiteSpace.FunctionSpacing.After" />
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace">
      <!--<exclude name="Squiz.WhiteSpace.SuperfluousWhitespace.After" />
      <exclude name="Squiz.WhiteSpace.SuperfluousWhitespace.EndLine" />-->
    </rule>

    <rule ref="Squiz.WhiteSpace.OperatorSpacing" />
    <rule ref="Generic.Arrays.DisallowLongArraySyntax"/>
    <rule ref="Generic.Commenting.Todo"/>

    <rule ref="Generic.Commenting.DocComment">
      <exclude name="Generic.Commenting.DocComment.Missing" />
      <exclude name="Generic.Commenting.DocComment.MissingShort" />
      <exclude name="Generic.Commenting.DocComment.TagsNotGrouped" />
    </rule>

    <rule ref="Generic.ControlStructures.InlineControlStructure"/>
    <rule ref="Generic.Formatting.DisallowMultipleStatements"/>
    <rule ref="Generic.Formatting.SpaceAfterCast"/>
    <rule ref="Generic.NamingConventions.ConstructorName"/>
    <rule ref="Generic.PHP.DeprecatedFunctions"/>
    <rule ref="Generic.PHP.LowerCaseKeyword"/>
    <rule ref="Generic.Strings.UnnecessaryStringConcat"/>
    <rule ref="PSR2.Classes.PropertyDeclaration"/>
    <rule ref="PSR2.Methods.MethodDeclaration"/>
    <rule ref="PSR2.Files.EndFileNewline"/>
    <rule ref="Zend.Files.ClosingTag"/>


     <!-- We use custom indent rules for arrays -->
    <rule ref="Generic.Arrays.ArrayIndent"/>
    <rule ref="Squiz.Arrays.ArrayDeclaration.KeyNotAligned">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.Arrays.ArrayDeclaration.ValueNotAligned">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.Arrays.ArrayDeclaration.CloseBraceNotAligned">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.Arrays.ArrayDeclaration.CloseBraceNewLine">
        <severity>0</severity>
    </rule>

    <!-- Check var names, but we don't want leading underscores for private vars -->
    <rule ref="Squiz.NamingConventions.ValidVariableName">
      <exclude name="Squiz.NamingConventions.ValidVariableName.NotCamelCaps" />
      <exclude name="Squiz.NamingConventions.ValidVariableName.MemberNotCamelCaps" />
    </rule>
    <rule ref="Squiz.NamingConventions.ValidVariableName.PrivateNoUnderscore">
        <severity>0</severity>
    </rule>
	
	<rule ref="PSR2.ControlStructures.SwitchDeclaration">
	  <exclude name="PSR2.ControlStructures.SwitchDeclaration.WrongOpenercase" />	  
	</rule>

    <!-- Only one argument per line in multi-line function calls -->
    <rule ref="PEAR.Functions.FunctionCallSignature">
        <properties>
            <property name="allowMultipleArguments" value="false"/>
        </properties>
    </rule>

    <!-- Have 12 chars padding maximum and always show as errors -->
    <rule ref="Generic.Formatting.MultipleStatementAlignment">
        <properties>
            <property name="maxPadding" value="12"/>
            <property name="error" value="true"/>
        </properties>
    </rule>

    <!-- Private methods MUST not be prefixed with an underscore -->
    <rule ref="PSR2.Methods.MethodDeclaration.Underscore">
        <type>error</type>
    </rule>

    <!-- Private properties MUST not be prefixed with an underscore -->
    <rule ref="PSR2.Classes.PropertyDeclaration.Underscore">
        <type>error</type>
    </rule>	

    <!-- The testing bootstrap file uses string concats to stop IDEs seeing the class aliases -->
    <rule ref="Generic.Strings.UnnecessaryStringConcat">
        <exclude-pattern>tests/bootstrap.php</exclude-pattern>
    </rule>

</ruleset>
